#- name: Read current inventory file
#  slurp:
#    src: "{{ inventory_file }}"
#  register: inventory_raw
#
#- name: Decode inventory file to string
#  set_fact:
#    inventory_text: "{{ inventory_raw.content | b64decode }}"
#
#- name: Determine indentation of DNS block safely
#  set_fact:
#    indent_matches: "{{ inventory_text | regex_findall('^([ \t]*)' ~ dns_block_start, multiline=True) }}"
#
#- name: Determine indentation of DNS block safely 2
#  set_fact:
#    dns_block_indent: "{{ indent_matches[0] | int if indent_matches | length > 0 else 0 }}"
#
#
#- name: Generate DNS YAML block with dynamic indentation
#  set_fact:
#    dns_block: |
#      {{ dns_block_start }}
#      {{ all_cf_entries | to_nice_yaml(indent=(dns_block_indent|int|default(2)), width=999) | indent(dns_block_indent) }}
#      {{ dns_block_end }}
#
#- name: Show generated DNS block
#  debug:
#    msg: "{{ dns_block }}"
#
#- name: Backup inventory manually
#  copy:
#    src: "{{ inventory_file }}"
#    dest: "{{ inventory_file }}.bak_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
#    remote_src: yes
#    
#- name: Replace DNS block in inventory file
#  replace:
#    path: "{{ inventory_file }}"
#    regexp: "(?s){{ dns_block_start }}.*{{ dns_block_end }}"
#    replace: "{{ dns_block }}"

- name: Generate DNS block from all_cf_entries
  set_fact:
    dns_block: |
      {{ dns_block_start }}
      {% for zone in all_cf_entries %}
      - zone: {{ zone.zone }}
        dns_entries:
      {% for entry in zone.dns_entries %}
        - { name: "{{ entry.name }}", type: "{{ entry.type }}", value: "{{ entry.content }}" }
      {% endfor %}
      {% endfor %}
      {{ dns_block_end }}

- name: Backup inventory manually
  copy:
    src: "{{ inventory_file }}"
    dest: "{{ inventory_file }}.bak_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    remote_src: yes
    

- name: Replace DNS block in inventory file
  replace:
    path: "{{ inventory_file }}"
    regexp: "(?s){{ dns_block_start }}.*{{ dns_block_end }}"
    replace: "{{ dns_block }}"

- name: Show generated DNS block
  debug:
    msg: "{{ dns_block }}"

- name: Remove (hashtag) BLOCK 
  lineinfile:
    path: "{{ inventory_file }}"
    state: absent
    regexp: '^# BLOCK START$'

- name: Remove (hashtag) BLOCK END
  lineinfile:
    path: "{{ inventory_file }}"
    state: absent
    regexp: '^# BLOCK END$'

- name: Read current inventory file
  slurp:
    src: "{{ inventory_file }}"
  register: inventory_raw

- name: Decode inventory YAML into string
  set_fact:
    inventory_text: "{{ inventory_raw.content | b64decode }}"

#- name: Parse replaced inventory text into YAML
#  set_fact:
#    inventory_data: "{{ inventory_text | from_yaml }}"

- name: Write formatted inventory back to file
  copy:
    dest: "{{ inventory_file }}"
    content: "{{ inventory_text | to_nice_yaml(indent=2, width=999) }}"
  diff: true

- name: Insert DNS markers if missing
  shell: |
    #!/bin/bash
    file="{{ inventory_file }}"
    # Insert START if missing
    grep -q '# BLOCK START' "$file" || \
    sed -i '/^\s*dns_zones:/a \ \ # BLOCK START' "$file"
    # Insert END if missing: after last '- ' line under dns_zones, before next param
    grep -q '# BLOCK END' "$file" || \
    awk '
    BEGIN {start_inserted=0}
    /^\s*dns_zones:/ {in_block=1; print; next}
    in_block && /^  - / {last_entry_line=NR}
    in_block && /^[^ ]/ && last_entry_line {print prev_line; print "  # BLOCK END"; in_block=0; next}
    {prev_line=$0; print}
    END {
      if(in_block && last_entry_line) print "  # BLOCK END"
    }' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
