#- name: Read current inventory file
#  slurp:
#    src: "{{ inventory_file }}"
#  register: inventory_raw
#
#- name: Decode inventory file to string
#  set_fact:
#    inventory_text: "{{ inventory_raw.content | b64decode }}"
#
#- name: Determine indentation of DNS block safely
#  set_fact:
#    indent_matches: "{{ inventory_text | regex_findall('^([ \t]*)' ~ dns_block_start, multiline=True) }}"
#
#- name: Determine indentation of DNS block safely 2
#  set_fact:
#    dns_block_indent: "{{ indent_matches[0] | int if indent_matches | length > 0 else 0 }}"
#
#
#- name: Generate DNS YAML block with dynamic indentation
#  set_fact:
#    dns_block: |
#      {{ dns_block_start }}
#      {{ all_cf_entries | to_nice_yaml(indent=(dns_block_indent|int|default(2)), width=999) | indent(dns_block_indent) }}
#      {{ dns_block_end }}
#
#- name: Show generated DNS block
#  debug:
#    msg: "{{ dns_block }}"
#
#- name: Backup inventory manually
#  copy:
#    src: "{{ inventory_file }}"
#    dest: "{{ inventory_file }}.bak_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
#    remote_src: yes
#    
#- name: Replace DNS block in inventory file
#  replace:
#    path: "{{ inventory_file }}"
#    regexp: "(?s){{ dns_block_start }}.*{{ dns_block_end }}"
#    replace: "{{ dns_block }}"

- name: Generate DNS block from all_cf_entries
  set_fact:
    dns_block: |
      {{ dns_block_start }}
      {% for zone in all_cf_entries %}
      - zone: {{ zone.zone }}
        dns_entries:
      {% for entry in zone.dns_entries %}
        - { name: "{{ entry.name }}", type: "{{ entry.type }}", value: "{{ entry.content }}" }
      {% endfor %}
      {% endfor %}
      {{ dns_block_end }}

- name: Backup inventory manually
  copy:
    src: "{{ inventory_file }}"
    dest: "{{ inventory_file }}.bak_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    remote_src: yes
    

- name: Replace DNS block in inventory file
  replace:
    path: "{{ inventory_file }}"
    regexp: "(?s){{ dns_block_start }}.*{{ dns_block_end }}"
    replace: "{{ dns_block }}"

- name: Show generated DNS block
  debug:
    msg: "{{ dns_block }}"

- name: Remove (hashtag) BLOCK 
  lineinfile:
    path: "{{ inventory_file }}"
    state: absent
    regexp: '^# BLOCK START$'

- name: Remove (hashtag) BLOCK END
  lineinfile:
    path: "{{ inventory_file }}"
    state: absent
    regexp: '^# BLOCK END$'

- name: "Installiere ruamel.yaml, falls noch nicht vorhanden"
  ansible.builtin.pip:
    name: ruamel.yaml
    state: present

- name: "Lege Python-Skript zum Korrigieren der YAML-Datei ab"
  ansible.builtin.copy:
    dest: "{{ script_path }}"
    content: |
      #!/usr/bin/env python3
      import sys
      from ruamel.yaml import YAML
      yaml = YAML()
      yaml.preserve_quotes = True
      input_file = sys.argv[1]
      output_file = sys.argv[2]
      with open(input_file, 'r') as f:
          data = yaml.load(f)
      with open(output_file, 'w') as f:
          yaml.dump(data, f)
    mode: '0755'

- name: "FÃ¼hre das Python-Skript aus, um die YAML-Datei korrekt zu formatieren"
  ansible.builtin.command: >
    {{ script_path }} {{ inventory_file }} {{ inventory_file }